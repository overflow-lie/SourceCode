/*
 * Copyright 2012 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package net.sirun.work.http;

import static io.netty.handler.codec.http.HttpConstants.CR;
import static io.netty.handler.codec.http.HttpConstants.LF;
import static io.netty.handler.codec.http.HttpConstants.SP;
import io.netty.buffer.ByteBuf;
import io.netty.handler.codec.http.HttpContent;
import io.netty.handler.codec.http.HttpObjectEncoder;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpResponse;

/**
 * Encodes an {@link HttpResponse} or an {@link HttpContent} into
 * a {@link ByteBuf}.
 */
public class TESTServerHandler extends HttpObjectEncoder<HttpResponse> {
    private static final byte[] CRLF = { CR, LF };

//    @Override
//    public boolean acceptOutboundMessage(Object msg) throws Exception {
//        return super.acceptOutboundMessage(msg) && !(msg instanceof HttpRequest);
//    }

    @Override
    protected void encodeInitialLine(io.netty.buffer.ByteBuf buf, io.netty.handler.codec.http.HttpResponse response) throws Exception {
     System.out.println("..");
    }
    
    public static void main(String s[]){
    	
    	String r = "FEEDFEED000000020000000100000001000A73656375726563686174000001442A440CB200000503308204FF300E060A2B060104012A021101010500048204EB3AF4C8571E9579280F1F5DDDEE96A8B247363E3DA17B45848BC106D6EA4412DCCC94D3587302AA1AB0DEBAB2FC2F4837A35C381105B23FBF8AA50E4C1A18228B9F9752A4B2723EF5180667BB9D05FD5CBC0DD9A8E9D0889A22BF84ED59F27C07E996A6BE5A1243959BA0B8FACE902C82FAE3205BCFF88B67E249E03745EAFEF5BF84E5D9A0C453CCF69B18605613586F1B22A092640F0E84822595E2C23D7D5E371A01806A9559636713B6D383D9CA0A6DE1F5FF1574EAA5B4808C6F278A35A8418BC4A3CC66AD486003833CD62C20E8B7E025AB713C09F80AFBAEF66F9542C225238339A41CD7366AEFFE67F7D883712E87A67F64A993CE2BDC57A6B599A258F259B14450C7DC435D6BC56A2695A5ED724D486ADBE17D53BA1E7C3EEA0281092471AA47854ADC8C857A88AFC4BA4D0BE979AC914EAC33CA7EF4046FBF830EF48003EB83A0A50DD7D62A990C9BE6DB2AAD1685153DFA07DAE34A700F5C6036214867C17ACAF7E85F30943C0BB6CBEFAAD66F33B4B1027F5FC67988F7AF5C732DE7A27D26F2DEBCA5BA4D8793C427F01949F233810BBC2A51F2AD4728BADD5F9B1D3E2D54F65372E36BFFF0423FF9FE620DCF240B255AF3C253F3F22440176D93065BFD589FFA5D6D1CBECC2F970E29E7BD08CB796447D0E7F63DDF546D9BBE043DC1BD09205F984BF3027EA18808C5168E16A3407B5C67C295BCAF0113D8DCF413F8BC5DD75BC61C6A4B04E829C2B767F6601E14C6DE97D49E7EE73E160CF539B3B7C73498791014D0F19800D6755243B8A2D9F8219BC00D75514D2DDBA281B9DE6EBF69E8E0EB59725896ACB715EB374CDAD9E7E7F271E55C985EE5774E3018CFB1083D8EC1B696015E7240EB34089E2F9DBF54472ABB7B229480BBD08275FE1CCC34A3DB795940C3648FC2CD82BC89CC66F8785CA767C5622B2E9D18697EA397F3FD33E09C7FFF101407E835A49F6D7E7D15CAE9860940F3DDD5B4702B8432209B7561D8E2B98391C7FD6F02D66A8B94EC77845BD015A09C6F58D289768959DB3B4E30D37E66016809B8711A32AB7A162907F313D703F7E87B9BE4C50CE50DCE33917CA54B01D116A3FE4A545A2AE8AE713E7EE3BB5C0D22775ED3D264AB198AD2311CFB719CBC69E4D85B58CFA7ECCED203A62A5C32412E5BC87560D524E8A42930C3384362BBF9A4763745B44E63EC05196FCD6B2834A8D272DC6BB2C50881925D8793F0495849FFD1634C74388BCAD82ED538BEA8F35DC2E0C81AFDBAD08912E289EC3C57C98FC964E05125CD2BC648884C2E31B1C3FD2ED09045C4E716E2299FF9F41BFFDBBD8E1EE685551686C4FCD3036FC3BFDD46F59C4C2C07F1CBD9896750C09BD8EABB618753327E54999593298ED9AFAABEB2F71C60B9B5633C6F961F792F89F7CC4A4D71B3F0DDF9AD0B25CC5F6A602B5817D8A0F8B723C0ED110DD9D913C70BF7FB4F8EC5A95CA6786DAD640BFC3D6782638EA5DA4981CB9A40F8F997C12EFE2C53A34164475B9C3149B22D6A2C23F3BCE1108F2D909B8A78645B534A479A801A4F2AF7DFCE83DF028B5FEA96064520A6FD091F95315547196955DC9B660F36F9740BC7D931C1FC92D1B8C5867A371C8D086DA2C35F3CBB10953D31AED44882D2F05121BB206E400A0F3228C284697C19182299676386785A1CF6239511A585A5E1101D13B0875DA64144871F2C186C8357DBE6807C8B28848B6EC3D3FC2803D78959BD785C3FCA6CCFBEBE9813A7094DF00D68246FB2A7963E9B2BDD62906BB328CB22000000010005582E353039000002D9308202D5308201BDA00302010202042D080668300D06092A864886F70D01010B0500301A311830160603550403130F70726F78792E736972756E2E6E65743020170D3134303231333038303134365A180F32313134303132303038303134365A301A311830160603550403130F70726F78792E736972756E2E6E657430820122300D06092A864886F70D01010105000382010F003082010A0282010100C15482573D2DB2A8208F2CA8C4F58B19F8AC749D93906C514537F39197DF9D9927778323636409F37B93988BED2E6B8B63B0B082626D63F45A5127506B9BFBB02458F5507860128627CC9FFAD5D34DA74A14C0F7F76BE773DEFD92FE49065F0A9B0A0E6B6C86C7A94FEC7DEF0183C43947DBC15EEC91E3809186E269FB5797902C2E1CFD64FBB95F37278D973B668AAF18443DF465DA17AB2858B7CD8D86B7E2F7709276536A7753641B0DA395D39F7B30568D4A7CD8020D61F2F13D7CD50EBA983287ABF71DB6106102B5F470047ED3A026A6D97113287E881C722EE258E34089E12760DA9BB1926323ECBA9320F62C35627104CF471B2D9FBF77DDBE382AC30203010001A321301F301D0603551D0E041604144DF5BF7357A22EFC3CC45054DEC39FCE8BE8CB6A300D06092A864886F70D01010B05000382010100148BEB1C363C95055BEFB384E878FB6A04011897A145D87FD1F48A22400AC36B1174BDF10CDCE0C0BF9D7A5EB7884A61E40990DB75A0B0C3C757058463F50BA256E78209014AC6A286D2D9D5DE4F8B860ED40DE39C322DA9B220E671196E40A47745867319ADE80ADAF47C6BC9FBCA6FCCE49F62FD6A3C83C0420EC3C847D7AF224D3AA955EC15236F84CB38F857326EE1C1D7C9BB31114A364A643FB53C97783BF2368C8E6356D8F300E6D77B747EDA8507A02C00DE7E70B1E9B2951FE080FE077B03B3F78BAD50E5E25EA30BC205790A04A3D03C7262B7C8343B5A28F177FB49E4F5D2FC99652F4F4F3BEC6EFBB0581E068CE85D75A7A85325EDD1379B81DB037CD68F124386B67DC06D857188DCE907371DCD";
    	System.out.println(r.length());
    	StringBuffer sb = new StringBuffer();
    	
    	for(int i=0;i<r.length();i+=2){
    	sb.append("0x"+r.substring(i, i+2)+" ,");
    	}
    	System.out.println(sb.toString());
    	System.out.println(sb.toString().length()/3*2);
    	
    }
}
